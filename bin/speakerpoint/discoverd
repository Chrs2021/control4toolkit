#!/usr/bin/perl -I..

use warnings;
use strict;
use IO::Socket;
use IO::Select;
use Socket;
use C4Toolkit;

my $pid = 0;

if ($pid = fork()) {
    exit;
}

$0 = "discoverd";
my $id = C4Toolkit::DeviceID();

my %payloads = (
	'speakerpoint' => [
		"NOTIFY * HTTP/1.1",
		"NTS: ssdp:alive",
		"ST: c4:control4_speakerpoint",
		"USN: c4:control4_speakerpoint-".$id,
		"Ext:KeepAlive",
		'Cache-Control: no-cache="Ext", max-age = 5000'
	],
	'audioserver' => [
		"NOTIFY * HTTP/1.1",
		"NTS: ssdp:alive",
		"ST: c4:control4_audio:server",
		"USN: c4:control4_audio:server-".$id,
		"Ext:",
		'Cache-Control: no-cache="Ext", max-age = 5000'
	]
);

my $Server = IO::Socket::INET->new(
	Proto    => 'udp',
	LocalPort => 1900
) or die (
	"socket: $@"
);

my $select = IO::Select->new(); 
$select->add($Server);

my @controllers;

while(1) {

	udp_send( "10.0.0.5:1032",        pkg('audioserver') );
	udp_send( "10.0.0.5:1032",        pkg('speakerpoint'));
	udp_send( "239.255.255.250:1900", pkg('speakerpoint'));

	sleep(60);
}

sub pkg {
	my $service = shift;
	return join("\r\n",@{$payloads{$service}})."\r\n\r\n";
}

sub udp_send {

	my ($destination, $message) = @_;

	my $h = IO::Socket::INET->new(
		Proto => 'udp',
		PeerAddr => $destination
	) or die(
		"($destination): $@ $!"
	); 
	
	unless ($h->send($message) == length($message)) {
		die("Cannot send to $destination: $!");
	}

	$h->close();

}
