#!/usr/bin/perl -I..

use warnings;
use strict;
use Data::Dumper;
use IO::Socket;
use IO::Select;
use C4Toolkit;

# Fetch device id
my $DEVICEID = C4Toolkit::DeviceID();

my $Listen = new IO::Socket::INET(
        Listen => 1,
        LocalPort => 6000,
        Reuse => 1
);
my $Stream = new IO::Socket::INET(
        Listen => 1,
        LocalPort => 6000,
        Reuse => 1
);


my %Channels = ();

our $Select = new IO::Select($Listen);
our $Select = new IO::Select($Stream);
print "1\n";
my %c = ();

open_channel("/dev/dsp",6001);

while(1) {
print "loop\n";
while(my @ready = $Select->can_read(1)) {
        print "2\n";
        foreach my $Handle (@ready) {

            print "3\n";
            if ($Handle == $Listen) {
		print "TCP INCOMING 6000\n";
                my $new = $Listen->accept;
                $Select->add($new);
                $c{$Handle}{'tcp'}++;

            } else {

		if (not defined $c{$Handle}{'stream'}) {
			my $Command = "";
		        my $sock_addr = recv( $Handle, $Command, 1024, 0 );
	
                        $Command =~ s/[\n\r]//sgi;
	
                        if ($Command =~ /^(\d+) (.+)/) {

				my $serial = $1;
				my $cmd = $2;

	print "IN###################\n";
	print Dumper \$c{$Handle};
	print "------------\n";	
	print "$Command\n";
	print "------------\n\n";


                                if ($cmd =~ /reset/i) {
					print "Bah\n";
                                        se($Handle, "$serial OK reset");
                                }

				elsif ($cmd =~ /^setmut /i) {
	                                se($Handle, "$serial OK SETMUT");
				}

				elsif ($cmd =~ /^getmut (\d+)/i) {
	                                se($Handle, "$serial getmut OFF\r\n$serial OK getmut");
				}

				elsif ($cmd =~ /^getvol (\d+)/i) {
	                                se($Handle, "$serial getvol $1 100 100\r\n$serial OK getvol");
				}

				elsif ($cmd =~ /^addch (\d+) ([^ ]+)/i) {
	                                se($Handle, "$serial addch Port or device already open\r\n$serial NO addch 6200\r\n");
					
				}

                        }

                } else {
			print "Stream packet\n";
		}


            }
        }
}
}
sub se {
        my $fh = shift;
        my $pkg = shift;
	
	print "OUT##################\n";
	print Dumper \$c{$fh};
	print "------------\n";	
	print "$pkg\n";
	print "------------\n\n";

        print $fh $pkg."\r\n";
        return 1;
}
sub socket_close {
        my $fh = shift;
        $Select->remove($fh);
        $fh->close();
}


sub open_channel {
	my $dsp = shift;
	my $port = shift;
	my $Handle = IO::Socket::INET->new(LocalPort => $port, Proto => 'udp') or die "socket: $@";
	$c{$Handle}{'port'} = $port;
	my $DSPHandle;

	open($DSPHandle,">".$dsp) or die("dsp: $! @!");

	$c{$Handle}{'dsp'} = $DSPHandle;
	$Select->add($Handle);

}
sub close_channel {
	my $Handle = shift;
	close($c{$Handle}{'dsp'});
}

