#!/usr/bin/perl -w
# Discover present Control4 devices
# Author: William Viker <tcp@loopback.no>
#
# Not very pretty. Never intended it to be public available :)

use strict;
use IO::Socket;
use IO::Select;

my $handle = IO::Socket::INET->new(
	Proto    => 'udp',
	PeerAddr => '239.255.255.250:1900',
	LocalPort => 31337,

) or die ("socket: $@");

my $MSG = "M-SEARCH * HTTP/1.1\r\n"
	. "HOST: 239.255.255.250:1900\r\n"
	. "MAN: \"ssdp:discover\"\r\n"
	. "MX: 5\r\n"
	. "ST: c4:director\r\n"
	. "\r\n";

if ($handle->send($MSG) != length($MSG)) { print "Oops. Couldn't send discovery packet: $@\n"; exit(0); }

$handle->close();

my $Server = IO::Socket::INET->new(
	Proto    => 'udp',
	LocalPort => 31337

) or die ("socket: $@");

# In case of several ways of discovering C4 units

my $select = IO::Select->new(); 
$select->add($Server);
my $timeout = time() + 3;

my @controllers;
while ($select->can_read(1) && $timeout > time()) {
	if ($Server->recv(my $datagram, 200)) {
		push @controllers, $datagram.
			"Host: ".$Server->peerhost()."\n";
	}
}

for (@controllers) {
	if (/c4:director:(\S+).+?Host: (\S+)/s) {
		my $cName = $1;
		my $cHost = $2;
		print "$cHost $cName\n";
		# We could use the controllers in @controllers to something useful
		# instead of only printing it to stdout. Run the getdata-script at
		# once, so you could do stuff on all units with one command ;D
	}
}
